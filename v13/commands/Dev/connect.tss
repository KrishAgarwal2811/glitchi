import {argumentObjectType} from '../types';
import fetch from 'node-fetch';
import {MessageCollector,TextChannel} from 'discord.js';
//import pageView from '../../libs/pagination/index';

export default {
  name: 'connect',
  description: 'connect to a channel.',
  // aliases : string[],
  args: true,
  // usage : string,
  // permissions : string,
  devOnly : true,
  // permRequired : [string],
  run
}

async function run({msg,args,content}:argumentObjectType){
  const id = args[0]
    .replace(/^<#/,'')
    .replace(/>$/,'');
  const channel=await msg.client.channels.fetch(id)
    .catch((err)=>msg.reply(err.message));
  if(!channel ||!(channel instanceof TextChannel )) 
    return msg.reply('Channel is not a TextChannel!');
  
  if(args[1]=='start'){
    if(msg.channel.id in global.config.block){
      msg.reply('This channel is already connected to a channel!');
      return;
    }
  
  const collector0 = channel.createMessageCollector({
    filter:(m)=>m.author?.id!=msg.client.user?.id,
    idle:1200000
  });
  collector0.on('collect',(m)=>{
    try {
      const webhooks = await channel.fetchWebhooks();
      const webhook = webhooks.first();
      
      await webhook.send({
        content: 'Webhook test',
        username: 'some-username',
        avatarURL: 'https://i.imgur.com/AfFp7pu.png',
        embeds: [embed],
      });
      
    } catch (error) {
      console.error('Error trying to send a message: ', error);
	}
});
    
    msg.channel.send({
    content : m.content,
    embeds : m.embeds,
    attachments : m.attachments as any,
    components : m.components,
    stickers : m.stickers as any
  })});
  
  const collector1 = msg.channel.createMessageCollector({
    filter:(m)=>m.author?.id==msg.author.id,
    idle:120000
  });
  collector1.on('collect',(m)=>{
    if(m.content == '-s' || m.content == '--stop'){
      collector0.stop();
      collector1.stop();
      return;
    }
    channel.send({
      content : m.content,
      embeds : m.embeds,
      attachments : m.attachments as any,
      components : m.components,
      stickers : m.stickers as any
    });
  });
  collector1.on('end',()=>{
    delete global.config.block[msg.channel.id];
    msg.channel.send('Channel disconnected!');
  })
  
  
  global.config.block[msg.channel.id]=msg.author.id;
  msg.reply(`Connected to channel <#${id}>. Use '-s' to stop`);
  }
  
  else {
    channel.send(content().replace(args[0],''));
  }
}



	